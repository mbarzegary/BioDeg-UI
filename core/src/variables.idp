// definition of all variables used throughout the code

IFMACRO(!idpVariables)
macro idpVariables 1 // prevent multiple include statements

// tracking scaffold, which is the positive part of the distance function
SpaceP0 scaffold = (phi > 0);

// main dependent variables (the solutions of our problem)
SpaceP1 Mg, F, Cl, OH;
// velocity of the interface and normal of the distance function
SpaceP1 v, normgradphi;
// effective diffusion coefficients of Mg and Cl at each mesh node
SpaceP1 DeMg, DeCl, DeOH;
// variables to keep previous step values. used for finite difference descretization of time
SpaceP1 Mgold, Fold, Clold, phiold, OHold;
// variables to evaluate the direction of the distance function, used to compute interface velocity
SpaceP1 xphi, yphi, zphi, dirx, diry, dirz;
// main vector state variables for the fluid flow
SpaceVector [ux, uy, uz, p];
SpaceVector [upx, upy, upz, pp]; // previous time step values
SpaceP0 nue; // effective mu
// variable to hold the size of the elements, used to calculate the smallest element size
SpaceP1 hhh;
real h; // smallest element size, used to compute interface velocity

real vDenom = 1 / (Mgsolid - Mgbc); // denominator of the interface velocity equation
real Vinit; // inital volume of the scaffold

real alpha; // value used to calculate initial velocity of the interface

// variables used for determining when to refine mesh during simulation (if necessary)
real scaffoldSize;
real scaffoldSizeOld;
real scaffoldChange;
int changed = 0;

real conv; // variable to hold the multiplier coefficient of hydrogen evolution equation
real count = 0; // number of current time step iteration
real timeToRedistance = dtRedistance;  // incremental variable to determine whether redistancing should be performed in current time step or not

real cpuTime; // variable to calculate time elapsed in tasks
real glob, loc; // variables used for collecting the volume size over partitioned mesh blocks

int[int] orderOut = [1, 1, 1, 1, 1, 1, 1, 1, 1]; // used to save the vtk output in point data (instead of cell data)

int temporalMult = solveFluidFlow ? 0 : 1; // used to enable-disable second temporal terms in weak forms
int convectMult = solveFluidFlow ? 1 : 0; // used to enable-disable convection terms in weak forms
int NSMult = solveFullNavierStokes ? 1 : 0; //used to convert NS equation to Stokes equation in its weak form

ENDIFMACRO
