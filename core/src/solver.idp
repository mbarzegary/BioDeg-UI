// solving the PDEs in parallel

IFMACRO(!idpSolver)
macro idpSolver 1 // prevent multiple include statements

if (solveLevelSet)
{
  if (mpirank==0) { print("Solving level set equation..."); setCPUTime }

  // solve level set PDE to get phi function
  Loc = shrink(SpaceP1, SpaceP1); // left hand side terms
  B = shrink(0, SpaceP1); // right hand side terms
  A = Loc;
  phi[] = A^-1 * B; // solve the assembled system

  if (mpirank==0) { printElapsedTime }
}

if (doRedistance) // if it is configured to redistance distance function
{
  if (t >= timeToRedistance) // if redistancing should be done in current time step
  {
    if (mpirank == 0)
      print("Redistancing the distance function...")

    fespace SpaceBackup(MeshBackup, Pk);
    SpaceBackup phiG, phiReduce;

    phiTemp = phi;
    phiTemp[] .*= A.D;

    int[int] rst = restrict(SpaceP1, SpaceBackup, n2oGlob);

    phiG = 0;
    for[i, v : rst] phiG[][v] = phiTemp[][i];

    phiReduce = 0;
    mpiAllReduce(phiG[], phiReduce[], mpiCommWorld, mpiSUM);

    distance(MeshBackup, phiReduce, phiG[]);
    phiReduce = phiG;

    phi = phiReduce;
    timeToRedistance += dtRedistance; // the next time in which redistancing will be performed
  }
}

// phi is changed, so we have to detect the scaffold region again
scaffold = (phi > 0);

if (solveMgEquation)
{
  if (mpirank==0) { print("Solving Mg concentration equation..."); setCPUTime }

  // solve Mg PDE to get Mg concentration
  Loc = magnes(SpaceP1, SpaceP1);
  B = magnes(0, SpaceP1);
  A = Loc;
  Mg[] = A^-1 * B;

  if (mpirank==0) { printElapsedTime }
}

if (solveClEquation)
{
  if (mpirank==0) { print("Solving Cl ion concentration equation..."); setCPUTime }

  // solve Cl PDE to get chloride ion concentration
  Loc = chloride(SpaceP1, SpaceP1);
  B = chloride(0, SpaceP1);
  A = Loc;
  Cl[] = A^-1 * B;

  if (mpirank==0) { printElapsedTime }
}

if (solveFilmEquation)
{
  if (mpirank==0) { print("Solving protective film formation equation..."); setCPUTime }

  // // solve film PDE to get protective film concentration
  Loc = film(SpaceP1, SpaceP1);
  B = film(0, SpaceP1);
  A = Loc;
  F[] = A^-1 * B;

  if (mpirank==0) { printElapsedTime }
}

if (solveOHEquation)
{
  if (mpirank==0) { print("Solving pH equation..."); setCPUTime }

  // solve OH PDE to get hydroxide ion concentration
  Loc = hydroxide(SpaceP1, SpaceP1);
  B = hydroxide(0, SpaceP1);
  A = Loc;
  OH[] = A^-1 * B;

  if (mpirank==0) { printElapsedTime }
}

if (solveFluidFlow)
{
  if (count % solveFluidEach == 0)
  {
    if (mpirank==0) { print("Solving Navier-Stokes equation..."); setCPUTime }

    // solve NS PDE to get the fluid velocity field
    NS = navierstokes(SpaceVector, SpaceVector, tgv=-1);
    NSrhs = navierstokes(0, SpaceVector, tgv=-1);
    ux[] = 0;
    ux[] = NS^-1 * NSrhs;

    if (mpirank==0) { printElapsedTime }
  }
}

scaffold = (phi > 0);

ENDIFMACRO
