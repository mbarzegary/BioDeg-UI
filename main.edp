load "msh3"
load "medit"
load "distance"
load "mmg"
load "parmmg"
load "mshmet"
load "tetgen"
load "iovtk"
include "getARGV.idp"

include "parameters.idp"
include "functions.idp"

real sizeX; //= 16 + 10;
real sizeY; //= 16 + 10;
real sizeZ; //= 25 + 10;
real shiftX; //= sizeX/2;
real shiftY; //= sizeY/2;
real shiftZ; //= sizeZ/2;
real xMin, xMax, yMin, yMax, zMin, zMax;

mesh3 Mesh;
mesh3 MeshScaffold;

// importSolution = false : normal mode, read the input mesh and embed it
// importSolution = true : import mode, using an already calculated soltuion on a mesh

if (!importSolution)
{
  if (mpirank == 0)
    print("Reading input mesh...");

  MeshScaffold = readmesh3(meshFileName);
  include "dimension.idp"

  if (mpirank == 0)
  {
    print("Generating mesh...");
    Mesh = cube(2, 2, 2, [sizeX*x-shiftX, sizeY*y-shiftY, sizeZ*z-shiftZ]);
    real[int] domain = [0, 0, 0, 0, 1];
    Mesh = tetgreconstruction(Mesh, switch="raAQ", regionlist=domain,
                            sizeofvolume=(sizeX/meshSize)*(sizeY/meshSize)*(sizeZ/meshSize)/6);
  }
  broadcast(processor(0), Mesh);
}
else
{
  Mesh = readmesh3(outputFileName);
  outputFileName = outputFileName + ".mesh";
}

fespace SpaceP1(Mesh, P1);
SpaceP1 phi = 0;

if (!importSolution)
{
  SpaceP1 X = x;
  SpaceP1 Y = y;
  SpaceP1 Z = z;

  SpaceP1 elemSize = hTriangle;
  real bound = elemSize[].max;
  if (mpirank == 0)
    print(bound);

  if (mpirank == 0)
  {
    print("Processing nodes...");
    for (int i = 0; i < SpaceP1.ndof; i++)
    {
      if (X[][i] > xMin-bound && X[][i] < xMax+bound &&
          Y[][i] > yMin-bound && Y[][i] < yMax+bound &&
          Z[][i] > zMin-bound && Z[][i] < zMax+bound)
        if (chi(MeshScaffold)(X[][i], Y[][i], Z[][i]) == 1)
          phi[][i] = 1;
      cout << "\rProcessed: " << i << " / " << SpaceP1.ndof;
    }
    cout << endl;
  }
  broadcast(processor(0), phi[]);

  phi = phi - 0.5;
}
else
{
  phi[] = readsol(solFileName);
  solFileName = solFileName + ".sol";
}

if (refineMesh)
{
  if (mpirank == 0)
    print("Refining the mesh...");

  SpaceP1 phiTemp;
  distance(Mesh, phi, phiTemp[]);
  phi = phiTemp;

  Mesh = change(Mesh, flabel=0);
  Mesh = change(Mesh, fregion=0);

  SpaceP1 sol = 0.5 * (phi > wd) + -0.5 * (phi < -wd) + 0 * (phi >= -wd) * (phi <= wd);

  SpaceP1 met;
  met[] = mshmet(Mesh, sol, aniso=0, hmin=meshMin, hmax=meshMax, err=mshmetError);
  if (doParallel)
    Mesh = parmmg3d(Mesh, metric=met[], hausd=hausd, hgrad=hgrad, verbose=10,
                    niter=nIterations, mem=allowedMemory, comm=mpiCommWorld);
  else
    Mesh = mmg3d(Mesh, metric=met[], hausd=hausd, hgrad=hgrad, verbose=10);
  phi = phi;
}

if (writeTestVtk)
{
  if (mpirank == 0)
  {
    int[int] orderOut = [1];
    savevtk(vtkFileName, Mesh, phi, dataname="phi", order=orderOut);
  }
}

if (mpirank == 0)
{
  savesol(solFileName, Mesh, phi);
  savemesh(Mesh, outputFileName);

  print("Finite Element DOF: " + SpaceP1.ndof);
  print("Number of Elements: " + Mesh.nt);
}
