// load modules
include "modules.idp"

// simulation, material, geometry, and solver parameters
include "parameters.idp"

// load basic macros and functions
include "functions.idp"

// print the program title
if (mpirank == 0)
  printHeader();

// create and configure the initial mesh
include "geometry.idp"

// definition of finite element and simulation variables
include "variables.idp"

// load weak forms of the problem PDEs
include "weak.idp"

// newton solver to calculate the stefan initial velocity
include "stefan.idp"

// initial conditions and setup
include "initial.idp"

// define matrices required for local solutions
// Mat A(SpaceP1.ndof, restriction, D);
matrix Loc;
real[int] B(SpaceP1.ndof);
real[int] NSrhs(SpaceVector.ndof);
// set(NS, sparams = nsParams, fields = ux[], names = names);

// main time loop
for(real t=0.; t<Tfinal; t += dt)
{
  // due to some differences in different MPI implementations, we should reinitialize the
  // A and b matrices (Ax=b) in each step, so it is the same as if we declare them inside loop

  // store previous value of solution spaces, required for finite difference discretization of time
  phiold  = phi;
  Fold = F;
  Mgold = Mg;
  Clold = Cl;
  OHold = OH;
  if (count) // not in the first step
    [upx, upy, upz, pp] = [ux, uy, uz, p];

  loc = intN(MeshNoOverlap)(scaffold);
  glob = 0;
  mpiAllReduce(loc, glob, mpiCommWorld, mpiSUM);
  scaffoldSize = glob;

  if (mpirank == 0)
  {
    printDivider;
    print("Time: " + t + "    Step: " + count + "    Evolved H2: " + (Vinit - scaffoldSize)*conv)
    print("Initial size: " + Vinit + "    Current size: " + scaffoldSize
    + "    % Change: " + ((Vinit - scaffoldSize) / Vinit * 100))
    printDivider;
  }

  if (((Vinit - scaffoldSize) / Vinit) >= 0.98) // the scaffold is almost fully degraded
  {
    print("The part is fully degraded!");
    break; // stop the simulation
  }
  
  // save output to disk if it should be
  include "save.idp"

  // save the scaffold mesh if requested
  include "export.idp"

  // calcualte interface shrinkage velocity
  include "interface.idp"

  // solve the PDEs in parallel and redistance distance function if required
  include "solver.idp"

  // perform adaptive mesh refinement if configured to do so
  // include "adaptive.idp"

  count += 1;

  // just to be sure that all processes are in line to go to next iteration
  mpiBarrier(mpiCommWorld);
}

// save the latest state of the model in the last time step
include "savelast.idp"
